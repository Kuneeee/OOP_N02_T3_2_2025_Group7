package com.taphoa.appbanhang.ui.panels;

import com.taphoa.appbanhang.entity.Hanghoa;
import com.taphoa.appbanhang.service.HanghoaService;
import com.taphoa.appbanhang.service.XuatBanService;
import com.taphoa.appbanhang.service.DoanhThuService;
import com.taphoa.appbanhang.service.NhapService;
import com.taphoa.appbanhang.ui.MainFrame;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.swing.*;
import java.awt.*;
import java.time.LocalDate;
import java.util.List;

@Component
public class DashboardPanel extends JPanel {

    @Autowired
    private HanghoaService hanghoaService;
    
    @Autowired
    private XuatBanService xuatBanService;
    
    @Autowired
    private DoanhThuService doanhThuService;
    
    @Autowired
    private NhapService nhapService;

    private JLabel totalProductsLabel;
    private JLabel todayRevenueLabel;
    private JLabel lowStockLabel;
    private JLabel monthlyProfitLabel;

    public DashboardPanel() {
        setLayout(new GridLayout(2, 2, 10, 10));
        initializeUI();
    }

    private void initializeUI() {
        // Ti√™u ƒë·ªÅ
        JPanel titlePanel = new JPanel(new BorderLayout());
        JLabel titleLabel = new JLabel("Dashboard - T·ªïng Quan");
        titleLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 24));
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        titlePanel.add(titleLabel, BorderLayout.CENTER);
        
        // T·∫°o main panel v·ªõi BorderLayout
        setLayout(new BorderLayout());
        add(titlePanel, BorderLayout.NORTH);
        
        // Panel ch·ª©a c√°c card stats
        JPanel statsPanel = new JPanel(new GridLayout(2, 2, 10, 10));
        statsPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        // T·∫°o c√°c card th·ªëng k√™
        statsPanel.add(createStatsCard("üì¶", "T·ªïng H√†ng H√≥a", "0", Color.GREEN));
        statsPanel.add(createStatsCard("üí∞", "Doanh Thu H√¥m Nay", "0 ‚Ç´", Color.BLUE));
        statsPanel.add(createStatsCard("‚ö†Ô∏è", "H√†ng S·∫Øp H·∫øt", "0", Color.ORANGE));
        statsPanel.add(createStatsCard("üìà", "L·ª£i Nhu·∫≠n Th√°ng", "0 ‚Ç´", Color.RED));
        
        add(statsPanel, BorderLayout.CENTER);

        // Panel ho·∫°t ƒë·ªông nhanh
        add(createQuickActionsPanel(), BorderLayout.SOUTH);
    }

    @Autowired
    public void loadData() {
        SwingUtilities.invokeLater(this::updateStats);
    }

    private JPanel createStatsCard(String icon, String title, String value, Color accentColor) {
        JPanel card = new JPanel(new BorderLayout());
        card.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(accentColor, 2),
            BorderFactory.createEmptyBorder(20, 20, 20, 20)
        ));
        card.setBackground(Color.WHITE);

        // Top panel v·ªõi icon v√† title
        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        topPanel.setBackground(Color.WHITE);
        
        // Icon
        JLabel iconLabel = new JLabel(icon);
        iconLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 48));
        topPanel.add(iconLabel);

        // Title
        JLabel titleLabel = new JLabel(title);
        titleLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
        titleLabel.setForeground(Color.GRAY);
        topPanel.add(titleLabel);

        // Value panel
        JPanel valuePanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        valuePanel.setBackground(Color.WHITE);
        
        JLabel valueLabel = new JLabel(value);
        valueLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        valueLabel.setForeground(accentColor);
        valuePanel.add(valueLabel);

        card.add(topPanel, BorderLayout.NORTH);
        card.add(valuePanel, BorderLayout.CENTER);

        // L∆∞u reference ƒë·ªÉ c·∫≠p nh·∫≠t sau
        switch (title) {
            case "T·ªïng H√†ng H√≥a":
                totalProductsLabel = valueLabel;
                break;
            case "Doanh Thu H√¥m Nay":
                todayRevenueLabel = valueLabel;
                break;
            case "H√†ng S·∫Øp H·∫øt":
                lowStockLabel = valueLabel;
                break;
            case "L·ª£i Nhu·∫≠n Th√°ng":
                monthlyProfitLabel = valueLabel;
                break;
        }

        return card;
    }

    private JPanel createQuickActionsPanel() {
        JPanel panel = new JPanel(new GridLayout(2, 4, 10, 10));
        panel.setBorder(BorderFactory.createTitledBorder("Thao T√°c Nhanh"));

        // C√°c n√∫t thao t√°c nhanh
        panel.add(createActionButton("üì¶ Th√™m H√†ng H√≥a", this::addProduct));
        panel.add(createActionButton("üì• Nh·∫≠p H√†ng", this::importProducts));
        panel.add(createActionButton("üì§ B√°n H√†ng", this::sellProducts));
        panel.add(createActionButton("üìä Xem B√°o C√°o", this::viewReports));
        panel.add(createActionButton("üìã B√°o C√°o T·ªïng H·ª£p", () -> viewSummaryReport()));

        panel.add(createActionButton("üîç T√¨m S·∫£n Ph·∫©m", this::searchProducts));
        panel.add(createActionButton("‚ö†Ô∏è H√†ng S·∫Øp H·∫øt", this::viewLowStock));
        panel.add(createActionButton("üíæ Sao L∆∞u", this::backup));
        panel.add(createActionButton("üîÑ L√†m M·ªõi", this::refresh));
        panel.add(createActionButton("‚öôÔ∏è C√†i ƒê·∫∑t", () -> openSettings()));

        return panel;
    }

    private JButton createActionButton(String text, Runnable action) {
        JButton button = new JButton(text);
        button.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 12));
        button.addActionListener(e -> action.run());
        return button;
    }

    private void updateStats() {
        try {
            // C·∫≠p nh·∫≠t t·ªïng s·ªë h√†ng h√≥a
            int totalProducts = hanghoaService.getAllHanghoa().size();
            if (totalProductsLabel != null) {
                totalProductsLabel.setText(String.valueOf(totalProducts));
            }

            // C·∫≠p nh·∫≠t doanh thu h√¥m nay
            Double todayRevenue = xuatBanService.getTotalRevenueByDate(LocalDate.now());
            if (todayRevenueLabel != null) {
                todayRevenueLabel.setText(formatCurrency(todayRevenue));
            }

            // C·∫≠p nh·∫≠t h√†ng s·∫Øp h·∫øt
            int lowStockCount = hanghoaService.getLowStockItems(10).size();
            if (lowStockLabel != null) {
                lowStockLabel.setText(String.valueOf(lowStockCount));
            }

            // C·∫≠p nh·∫≠t l·ª£i nhu·∫≠n th√°ng
            LocalDate startOfMonth = LocalDate.now().withDayOfMonth(1);
            LocalDate endOfMonth = LocalDate.now();
            Double monthlyProfit = doanhThuService.getTotalProfitBetweenDates(startOfMonth, endOfMonth);
            if (monthlyProfitLabel != null) {
                monthlyProfitLabel.setText(formatCurrency(monthlyProfit));
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "L·ªói c·∫≠p nh·∫≠t d·ªØ li·ªáu: " + e.getMessage());
        }
    }

    private String formatCurrency(Double amount) {
        if (amount == null) amount = 0.0;
        return String.format("%,.0f ‚Ç´", amount);
    }

    // C√°c ph∆∞∆°ng th·ª©c x·ª≠ l√Ω s·ª± ki·ªán
    private void addProduct() {
        // Hi·ªÉn th·ªã dialog th√™m h√†ng h√≥a
        try {
            Frame parentFrame = (Frame) SwingUtilities.getWindowAncestor(this);
            HanghoaDialog dialog = new HanghoaDialog(parentFrame, "Th√™m H√†ng H√≥a M·ªõi", true);
            dialog.setVisible(true);
            
            Hanghoa newHanghoa = dialog.getHanghoa();
            if (newHanghoa != null) {
                hanghoaService.saveHanghoa(newHanghoa);
                updateStats(); // C·∫≠p nh·∫≠t l·∫°i th·ªëng k√™
                JOptionPane.showMessageDialog(this, "Th√™m h√†ng h√≥a th√†nh c√¥ng!", 
                    "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói khi th√™m h√†ng h√≥a: " + e.getMessage(), 
                "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void importProducts() {
        // Hi·ªÉn th·ªã dialog nh·∫≠p h√†ng
        try {
            Frame parentFrame = (Frame) SwingUtilities.getWindowAncestor(this);
            NhapDialog dialog = new NhapDialog(parentFrame, "Nh·∫≠p H√†ng M·ªõi", hanghoaService);
            dialog.setVisible(true);
            
            if (dialog.isConfirmed()) {
                updateStats(); // C·∫≠p nh·∫≠t l·∫°i th·ªëng k√™
                JOptionPane.showMessageDialog(this, "Nh·∫≠p h√†ng th√†nh c√¥ng!", 
                    "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói khi nh·∫≠p h√†ng: " + e.getMessage(), 
                "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void sellProducts() {
        // Hi·ªÉn th·ªã dialog b√°n h√†ng
        try {
            Frame parentFrame = (Frame) SwingUtilities.getWindowAncestor(this);
            XuatBanDialog dialog = new XuatBanDialog(parentFrame, "B√°n H√†ng M·ªõi", hanghoaService);
            dialog.setVisible(true);
            
            if (dialog.isConfirmed()) {
                updateStats(); // C·∫≠p nh·∫≠t l·∫°i th·ªëng k√™
                JOptionPane.showMessageDialog(this, "B√°n h√†ng th√†nh c√¥ng!", 
                    "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói khi b√°n h√†ng: " + e.getMessage(), 
                "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void viewReports() {
        // Chuy·ªÉn ƒë·∫øn panel b√°o c√°o doanh thu
        MainFrame mainFrame = (MainFrame) SwingUtilities.getWindowAncestor(this);
        if (mainFrame != null) {
            mainFrame.switchToPanel("DoanhThu");
        }
    }
    
    private void viewSummaryReport() {
        // Hi·ªÉn th·ªã b√°o c√°o t·ªïng h·ª£p
        try {
            Frame parentFrame = (Frame) SwingUtilities.getWindowAncestor(this);
            ReportDialog reportDialog = new ReportDialog(parentFrame, hanghoaService, 
                xuatBanService, nhapService, doanhThuService);
            reportDialog.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "L·ªói khi t·∫°o b√°o c√°o: " + e.getMessage(), 
                "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void searchProducts() {
        String keyword = JOptionPane.showInputDialog(this, "Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm s·∫£n ph·∫©m:");
        if (keyword != null && !keyword.trim().isEmpty()) {
            try {
                List<Hanghoa> results = hanghoaService.searchByTenHangHoa(keyword.trim());
                if (results.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o!", 
                        "K·∫øt qu·∫£ t√¨m ki·∫øm", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    StringBuilder message = new StringBuilder("T√¨m th·∫•y " + results.size() + " s·∫£n ph·∫©m:\n\n");
                    for (int i = 0; i < Math.min(results.size(), 5); i++) {
                        Hanghoa h = results.get(i);
                        message.append("‚Ä¢ ").append(h.getTenHangHoa())
                               .append(" (SL: ").append(h.getSoLuongHangHoa()).append(")\n");
                    }
                    if (results.size() > 5) {
                        message.append("... v√† ").append(results.size() - 5).append(" s·∫£n ph·∫©m kh√°c");
                    }
                    
                    JOptionPane.showMessageDialog(this, message.toString(), 
                        "K·∫øt qu·∫£ t√¨m ki·∫øm", JOptionPane.INFORMATION_MESSAGE);
                        
                    // Chuy·ªÉn ƒë·∫øn tab h√†ng h√≥a ƒë·ªÉ xem chi ti·∫øt
                    MainFrame mainFrame = (MainFrame) SwingUtilities.getWindowAncestor(this);
                    if (mainFrame != null) {
                        mainFrame.switchToPanel("Hanghoa");
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "L·ªói khi t√¨m ki·∫øm: " + e.getMessage(), 
                    "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void viewLowStock() {
        try {
            List<Hanghoa> lowStockItems = hanghoaService.getLowStockItems(10);
            if (lowStockItems.isEmpty()) {
                JOptionPane.showMessageDialog(this, "T·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu c√≥ s·ªë l∆∞·ª£ng ƒë·ªß!", 
                    "H√†ng t·ªìn kho", JOptionPane.INFORMATION_MESSAGE);
            } else {
                StringBuilder message = new StringBuilder("C√≥ " + lowStockItems.size() + " s·∫£n ph·∫©m s·∫Øp h·∫øt:\n\n");
                for (Hanghoa h : lowStockItems) {
                    message.append("‚Ä¢ ").append(h.getTenHangHoa())
                           .append(" (SL: ").append(h.getSoLuongHangHoa()).append(")\n");
                }
                message.append("\nB·∫°n c√≥ mu·ªën chuy·ªÉn ƒë·∫øn qu·∫£n l√Ω h√†ng h√≥a kh√¥ng?");
                
                int choice = JOptionPane.showConfirmDialog(this, message.toString(), 
                    "C·∫£nh b√°o h√†ng s·∫Øp h·∫øt", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                    
                if (choice == JOptionPane.YES_OPTION) {
                    MainFrame mainFrame = (MainFrame) SwingUtilities.getWindowAncestor(this);
                    if (mainFrame != null) {
                        mainFrame.switchToPanel("Hanghoa");
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói khi ki·ªÉm tra h√†ng t·ªìn: " + e.getMessage(), 
                "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void backup() {
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Ch·ªçn v·ªã tr√≠ sao l∆∞u");
            fileChooser.setSelectedFile(new java.io.File("backup_" + 
                LocalDate.now().format(java.time.format.DateTimeFormatter.ofPattern("ddMMyyyy")) + ".xlsx"));
            
            int userSelection = fileChooser.showSaveDialog(this);
            if (userSelection == JFileChooser.APPROVE_OPTION) {
                String filePath = fileChooser.getSelectedFile().getAbsolutePath();
                if (!filePath.toLowerCase().endsWith(".xlsx")) {
                    filePath += ".xlsx";
                }
                
                // Sao l∆∞u t·∫•t c·∫£ d·ªØ li·ªáu doanh thu
                doanhThuService.exportToExcel(filePath, null, null);
                
                JOptionPane.showMessageDialog(this, 
                    "Sao l∆∞u d·ªØ li·ªáu th√†nh c√¥ng!\nFile: " + filePath, 
                    "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "L·ªói khi sao l∆∞u: " + e.getMessage(), 
                "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void refresh() {
        SwingUtilities.invokeLater(() -> {
            updateStats();
            JOptionPane.showMessageDialog(this, "ƒê√£ l√†m m·ªõi d·ªØ li·ªáu!", 
                "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
        });
    }
    
    private void openSettings() {
        try {
            Frame parentFrame = (Frame) SwingUtilities.getWindowAncestor(this);
            SettingsDialog settingsDialog = new SettingsDialog(parentFrame);
            settingsDialog.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "L·ªói khi m·ªü c√†i ƒë·∫∑t: " + e.getMessage(), 
                "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }
}
