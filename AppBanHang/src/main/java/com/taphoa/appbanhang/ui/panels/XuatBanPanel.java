package com.taphoa.appbanhang.ui.panels;

import com.taphoa.appbanhang.entity.Hanghoa;
import com.taphoa.appbanhang.entity.XuatBan;
import com.taphoa.appbanhang.service.HanghoaService;
import com.taphoa.appbanhang.service.XuatBanService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Component
public class XuatBanPanel extends JPanel {

    @Autowired
    private XuatBanService xuatBanService;
    
    @Autowired
    private HanghoaService hanghoaService;

    private JTable table;
    private DefaultTableModel tableModel;
    private JTextField searchField;
    private JButton addButton, editButton, deleteButton, refreshButton;

    public XuatBanPanel() {
        initializeUI();
    }

    @Autowired
    public void initializeData() {
        loadData();
    }

    private void initializeUI() {
        setLayout(new BorderLayout());
        setBorder(BorderFactory.createTitledBorder("Qu·∫£n L√Ω Xu·∫•t B√°n"));

        // Panel t√¨m ki·∫øm v√† c√°c n√∫t
        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        
        JLabel searchLabel = new JLabel("T√¨m ki·∫øm:");
        searchField = new JTextField(20);
        JButton searchButton = new JButton("üîç T√¨m");
        
        searchButton.addActionListener(e -> performSearch());
        searchField.addActionListener(e -> performSearch());
        
        topPanel.add(searchLabel);
        topPanel.add(searchField, "growx");
        topPanel.add(searchButton);
        
        add(topPanel, BorderLayout.NORTH);

        // B·∫£ng hi·ªÉn th·ªã d·ªØ li·ªáu
        createTable();
        JScrollPane scrollPane = new JScrollPane(table);
        add(scrollPane, BorderLayout.CENTER);

        // Panel c√°c n√∫t ch·ª©c nƒÉng
        JPanel buttonPanel = new JPanel(new FlowLayout());
        
        addButton = new JButton("‚ûï Th√™m");
        editButton = new JButton("‚úèÔ∏è S·ª≠a");
        deleteButton = new JButton("üóëÔ∏è X√≥a");
        refreshButton = new JButton("üîÑ L√†m m·ªõi");
        
        addButton.addActionListener(this::addXuatBan);
        editButton.addActionListener(this::editXuatBan);
        deleteButton.addActionListener(this::deleteXuatBan);
        refreshButton.addActionListener(e -> loadData());
        
        buttonPanel.add(addButton);
        buttonPanel.add(editButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(refreshButton);
        
        add(buttonPanel, BorderLayout.SOUTH);
    }

    private void createTable() {
        String[] columnNames = {"ID", "M√£ h√†ng", "T√™n h√†ng", "S·ªë l∆∞·ª£ng", "Gi√° b√°n", "Th√†nh ti·ªÅn", "Ng√†y b√°n", "Kh√°ch h√†ng", "Ghi ch√∫"};
        tableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        table = new JTable(tableModel);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.getTableHeader().setReorderingAllowed(false);
        
        // ƒê·∫∑t ƒë·ªô r·ªông c·ªôt
        table.getColumnModel().getColumn(0).setPreferredWidth(50);  // ID
        table.getColumnModel().getColumn(1).setPreferredWidth(80);  // M√£ h√†ng
        table.getColumnModel().getColumn(2).setPreferredWidth(150); // T√™n h√†ng
        table.getColumnModel().getColumn(3).setPreferredWidth(80);  // S·ªë l∆∞·ª£ng
        table.getColumnModel().getColumn(4).setPreferredWidth(100); // Gi√° b√°n
        table.getColumnModel().getColumn(5).setPreferredWidth(100); // Th√†nh ti·ªÅn
        table.getColumnModel().getColumn(6).setPreferredWidth(120); // Ng√†y b√°n
        table.getColumnModel().getColumn(7).setPreferredWidth(120); // Kh√°ch h√†ng
        table.getColumnModel().getColumn(8).setPreferredWidth(150); // Ghi ch√∫
    }

    private void loadData() {
        tableModel.setRowCount(0);
        try {
            List<XuatBan> xuatBanList = xuatBanService.findAll();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            
            for (XuatBan xuatBan : xuatBanList) {
                Object[] row = {
                    xuatBan.getId(),
                    xuatBan.getHanghoa().getMaHang(),
                    xuatBan.getHanghoa().getTenHang(),
                    xuatBan.getSoLuong(),
                    String.format("%,.0f", xuatBan.getGiaBan()),
                    String.format("%,.0f", xuatBan.getThanhTien()),
                    xuatBan.getNgayBan().format(formatter),
                    xuatBan.getKhachHang() != null ? xuatBan.getKhachHang() : "",
                    xuatBan.getGhiChu() != null ? xuatBan.getGhiChu() : ""
                };
                tableModel.addRow(row);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "L·ªói khi t·∫£i d·ªØ li·ªáu: " + e.getMessage(), 
                "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void performSearch() {
        String keyword = searchField.getText().trim();
        if (keyword.isEmpty()) {
            loadData();
            return;
        }

        tableModel.setRowCount(0);
        try {
            List<XuatBan> xuatBanList = xuatBanService.search(keyword);
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            
            for (XuatBan xuatBan : xuatBanList) {
                Object[] row = {
                    xuatBan.getId(),
                    xuatBan.getHanghoa().getMaHang(),
                    xuatBan.getHanghoa().getTenHang(),
                    xuatBan.getSoLuong(),
                    String.format("%,.0f", xuatBan.getGiaBan()),
                    String.format("%,.0f", xuatBan.getThanhTien()),
                    xuatBan.getNgayBan().format(formatter),
                    xuatBan.getKhachHang() != null ? xuatBan.getKhachHang() : "",
                    xuatBan.getGhiChu() != null ? xuatBan.getGhiChu() : ""
                };
                tableModel.addRow(row);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "L·ªói khi t√¨m ki·∫øm: " + e.getMessage(), 
                "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void addXuatBan(ActionEvent e) {
        XuatBanDialog dialog = new XuatBanDialog((Frame) SwingUtilities.getWindowAncestor(this), 
                                               "Th√™m Phi·∫øu Xu·∫•t B√°n", hanghoaService);
        dialog.setVisible(true);
        
        if (dialog.isConfirmed()) {
            try {
                XuatBan xuatBan = dialog.getXuatBan();
                
                // Ki·ªÉm tra t·ªìn kho
                Hanghoa hanghoa = xuatBan.getHanghoa();
                if (hanghoa.getSoLuongTon() < xuatBan.getSoLuong()) {
                    JOptionPane.showMessageDialog(this, 
                        "Kh√¥ng ƒë·ªß h√†ng trong kho!\nT·ªìn kho hi·ªán t·∫°i: " + hanghoa.getSoLuongTon(), 
                        "L·ªói", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                xuatBanService.save(xuatBan);
                loadData();
                JOptionPane.showMessageDialog(this, "Th√™m phi·∫øu xu·∫•t b√°n th√†nh c√¥ng!", 
                                            "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, 
                    "L·ªói khi th√™m phi·∫øu xu·∫•t b√°n: " + ex.getMessage(), 
                    "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void editXuatBan(ActionEvent e) {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn phi·∫øu xu·∫•t b√°n c·∫ßn s·ª≠a!", 
                                        "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            Long id = (Long) tableModel.getValueAt(selectedRow, 0);
            XuatBan xuatBan = xuatBanService.findById(id).orElse(null);
            if (xuatBan == null) {
                JOptionPane.showMessageDialog(this, "Kh√¥ng t√¨m th·∫•y phi·∫øu xu·∫•t b√°n!", 
                                            "L·ªói", JOptionPane.ERROR_MESSAGE);
                return;
            }

            XuatBanDialog dialog = new XuatBanDialog((Frame) SwingUtilities.getWindowAncestor(this), 
                                                   "S·ª≠a Phi·∫øu Xu·∫•t B√°n", hanghoaService, xuatBan);
            dialog.setVisible(true);
            
            if (dialog.isConfirmed()) {
                XuatBan updatedXuatBan = dialog.getXuatBan();
                updatedXuatBan.setId(id);
                
                // Ki·ªÉm tra t·ªìn kho (tr·ª´ s·ªë l∆∞·ª£ng c≈©, c·ªông s·ªë l∆∞·ª£ng m·ªõi)
                Hanghoa hanghoa = updatedXuatBan.getHanghoa();
                int soLuongKhaDung = hanghoa.getSoLuongTon() + xuatBan.getSoLuong();
                if (soLuongKhaDung < updatedXuatBan.getSoLuong()) {
                    JOptionPane.showMessageDialog(this, 
                        "Kh√¥ng ƒë·ªß h√†ng trong kho!\nT·ªìn kho c√≥ th·ªÉ s·ª≠ d·ª•ng: " + soLuongKhaDung, 
                        "L·ªói", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                xuatBanService.save(updatedXuatBan);
                loadData();
                JOptionPane.showMessageDialog(this, "C·∫≠p nh·∫≠t phi·∫øu xu·∫•t b√°n th√†nh c√¥ng!", 
                                            "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, 
                "L·ªói khi s·ª≠a phi·∫øu xu·∫•t b√°n: " + ex.getMessage(), 
                "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteXuatBan(ActionEvent e) {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn phi·∫øu xu·∫•t b√°n c·∫ßn x√≥a!", 
                                        "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, 
            "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a phi·∫øu xu·∫•t b√°n n√†y?", 
            "X√°c nh·∫≠n x√≥a", JOptionPane.YES_NO_OPTION);
        
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                Long id = (Long) tableModel.getValueAt(selectedRow, 0);
                xuatBanService.deleteById(id);
                loadData();
                JOptionPane.showMessageDialog(this, "X√≥a phi·∫øu xu·∫•t b√°n th√†nh c√¥ng!", 
                                            "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, 
                    "L·ªói khi x√≥a phi·∫øu xu·∫•t b√°n: " + ex.getMessage(), 
                    "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}
