package entity;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

/**
 * Entity t√¨m ki·∫øm h√†ng h√≥a v√† b√°n h√†ng
 * T√≠ch h·ª£p logic t·ª´ entity g·ªëc
 */
public class TimKiem {

    private List<Ban> danhSachBan;
    private List<HangHoa> danhSachHangHoa;

    // Constructors
    public TimKiem() {
        this.danhSachBan = new ArrayList<>();
        this.danhSachHangHoa = new ArrayList<>();
    }

    public TimKiem(List<Ban> danhSachBan) {
        this.danhSachBan = danhSachBan != null ? danhSachBan : new ArrayList<>();
        this.danhSachHangHoa = new ArrayList<>();
    }

    public TimKiem(List<Ban> danhSachBan, List<HangHoa> danhSachHangHoa) {
        this.danhSachBan = danhSachBan != null ? danhSachBan : new ArrayList<>();
        this.danhSachHangHoa = danhSachHangHoa != null ? danhSachHangHoa : new ArrayList<>();
    }

    // Getters v√† Setters
    public List<Ban> getDanhSachBan() { return danhSachBan; }
    public void setDanhSachBan(List<Ban> danhSachBan) { this.danhSachBan = danhSachBan; }

    public List<HangHoa> getDanhSachHangHoa() { return danhSachHangHoa; }
    public void setDanhSachHangHoa(List<HangHoa> danhSachHangHoa) { this.danhSachHangHoa = danhSachHangHoa; }

    // T√¨m ki·∫øm trong danh s√°ch Ban

    /**
     * T√¨m c√°c Ban theo t√™n h√†ng h√≥a (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
     */
    public List<Ban> timBanTheoTen(String ten) {
        List<Ban> ketQua = new ArrayList<>();
        if (ten == null || ten.trim().isEmpty()) {
            System.out.println("‚ö†Ô∏è T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
            return ketQua;
        }

        String tuKhoa = ten.toLowerCase().trim();
        for (Ban ban : danhSachBan) {
            if (ban.getTenHangHoa() != null && 
                ban.getTenHangHoa().toLowerCase().contains(tuKhoa)) {
                ketQua.add(ban);
            }
        }
        return ketQua;
    }

    /**
     * T√¨m Ban theo m√£ h√†ng h√≥a
     */
    public List<Ban> timBanTheoMa(String ma) {
        List<Ban> ketQua = new ArrayList<>();
        if (ma == null || ma.trim().isEmpty()) {
            return ketQua;
        }

        String maTimKiem = ma.toLowerCase().trim();
        for (Ban ban : danhSachBan) {
            if (ban.getHangHoaID() != null && 
                ban.getHangHoaID().toLowerCase().contains(maTimKiem)) {
                ketQua.add(ban);
            }
        }
        return ketQua;
    }

    /**
     * T√¨m Ban theo kh√°ch h√†ng
     */
    public List<Ban> timBanTheoKhachHang(String tenKhachHang) {
        List<Ban> ketQua = new ArrayList<>();
        if (tenKhachHang == null || tenKhachHang.trim().isEmpty()) {
            return ketQua;
        }

        String tuKhoa = tenKhachHang.toLowerCase().trim();
        for (Ban ban : danhSachBan) {
            if (ban.getKhachHang() != null && 
                ban.getKhachHang().toLowerCase().contains(tuKhoa)) {
                ketQua.add(ban);
            }
        }
        return ketQua;
    }

    /**
     * T√¨m Ban theo kho·∫£ng gi√°
     */
    public List<Ban> timBanTheoKhoangGia(double giaMin, double giaMax) {
        List<Ban> ketQua = new ArrayList<>();
        for (Ban ban : danhSachBan) {
            double tongTien = ban.tinhTongTienBan();
            if (tongTien >= giaMin && tongTien <= giaMax) {
                ketQua.add(ban);
            }
        }
        return ketQua;
    }

    // T√¨m ki·∫øm trong danh s√°ch HangHoa

    /**
     * T√¨m HangHoa theo t√™n
     */
    public List<HangHoa> timHangHoaTheoTen(String ten) {
        List<HangHoa> ketQua = new ArrayList<>();
        if (ten == null || ten.trim().isEmpty()) {
            return ketQua;
        }

        String tuKhoa = ten.toLowerCase().trim();
        for (HangHoa hangHoa : danhSachHangHoa) {
            if (hangHoa.getTenHangHoa() != null && 
                hangHoa.getTenHangHoa().toLowerCase().contains(tuKhoa)) {
                ketQua.add(hangHoa);
            }
        }
        return ketQua;
    }

    /**
     * T√¨m HangHoa theo lo·∫°i
     */
    public List<HangHoa> timHangHoaTheoLoai(String loai) {
        List<HangHoa> ketQua = new ArrayList<>();
        if (loai == null || loai.trim().isEmpty()) {
            return ketQua;
        }

        String tuKhoa = loai.toLowerCase().trim();
        for (HangHoa hangHoa : danhSachHangHoa) {
            if (hangHoa.getLoaiHangHoa() != null && 
                hangHoa.getLoaiHangHoa().toLowerCase().contains(tuKhoa)) {
                ketQua.add(hangHoa);
            }
        }
        return ketQua;
    }

    /**
     * T√¨m HangHoa s·∫Øp h·∫øt (s·ªë l∆∞·ª£ng <= ng∆∞·ª°ng)
     */
    public List<HangHoa> timHangHoaSapHet(int nguongSapHet) {
        List<HangHoa> ketQua = new ArrayList<>();
        for (HangHoa hangHoa : danhSachHangHoa) {
            if (hangHoa.getSoLuongHangHoa() <= nguongSapHet) {
                ketQua.add(hangHoa);
            }
        }
        return ketQua;
    }

    // T√¨m ki·∫øm t·ªïng h·ª£p

    /**
     * T√¨m ki·∫øm t·ªïng h·ª£p theo t·ª´ kh√≥a (t√¨m trong c·∫£ Ban v√† HangHoa)
     */
    public void timKiemTongHop(String tuKhoa) {
        if (tuKhoa == null || tuKhoa.trim().isEmpty()) {
            System.out.println("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm!");
            return;
        }

        System.out.println("üîç T√¨m ki·∫øm v·ªõi t·ª´ kh√≥a: \"" + tuKhoa + "\"");
        System.out.println("==========================================");

        // T√¨m trong danh s√°ch Ban
        List<Ban> ketQuaBan = timBanTheoTen(tuKhoa);
        List<Ban> ketQuaBanTheoMa = timBanTheoMa(tuKhoa);
        
        // G·ªôp k·∫øt qu·∫£ v√† lo·∫°i b·ªè tr√πng l·∫∑p
        for (Ban ban : ketQuaBanTheoMa) {
            if (!ketQuaBan.contains(ban)) {
                ketQuaBan.add(ban);
            }
        }

        if (!ketQuaBan.isEmpty()) {
            System.out.println("üìã K·∫æT QU·∫¢ T√åM TRONG B√ÅN H√ÄNG:");
            for (Ban ban : ketQuaBan) {
                System.out.println("  ‚Ä¢ " + ban.toString());
            }
        }

        // T√¨m trong danh s√°ch HangHoa
        List<HangHoa> ketQuaHangHoa = timHangHoaTheoTen(tuKhoa);
        if (!ketQuaHangHoa.isEmpty()) {
            System.out.println("üì¶ K·∫æT QU·∫¢ T√åM TRONG H√ÄNG H√ìA:");
            for (HangHoa hangHoa : ketQuaHangHoa) {
                System.out.println("  ‚Ä¢ " + hangHoa.toString());
            }
        }

        // Th·ªëng k√™ k·∫øt qu·∫£
        int tongKetQua = ketQuaBan.size() + ketQuaHangHoa.size();
        if (tongKetQua == 0) {
            System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o ph√π h·ª£p!");
        } else {
            System.out.println("==========================================");
            System.out.println("üìä T·ªïng c·ªông t√¨m th·∫•y: " + tongKetQua + " k·∫øt qu·∫£");
            System.out.println("   - B√°n h√†ng: " + ketQuaBan.size() + " k·∫øt qu·∫£");
            System.out.println("   - H√†ng h√≥a: " + ketQuaHangHoa.size() + " k·∫øt qu·∫£");
        }
    }

    /**
     * T∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi d√πng ƒë·ªÉ t√¨m ki·∫øm Ban
     */
    public void timKiemBan(Scanner sc) {
        System.out.println("üîç === T√åM KI·∫æM B√ÅN H√ÄNG ===");
        System.out.println("1. T√¨m theo t√™n h√†ng h√≥a");
        System.out.println("2. T√¨m theo m√£ h√†ng h√≥a"); 
        System.out.println("3. T√¨m theo kh√°ch h√†ng");
        System.out.println("4. T√¨m theo kho·∫£ng gi√°");
        System.out.print("Ch·ªçn lo·∫°i t√¨m ki·∫øm (1-4): ");
        
        int luaChon = sc.nextInt();
        sc.nextLine(); // consume newline

        switch (luaChon) {
            case 1:
                System.out.print("Nh·∫≠p t√™n h√†ng h√≥a c·∫ßn t√¨m: ");
                String tenHangHoa = sc.nextLine();
                List<Ban> ketQua1 = timBanTheoTen(tenHangHoa);
                hienThiKetQuaTimBan(ketQua1, "t√™n h√†ng h√≥a: " + tenHangHoa);
                break;
                
            case 2:
                System.out.print("Nh·∫≠p m√£ h√†ng h√≥a c·∫ßn t√¨m: ");
                String maHangHoa = sc.nextLine();
                List<Ban> ketQua2 = timBanTheoMa(maHangHoa);
                hienThiKetQuaTimBan(ketQua2, "m√£ h√†ng h√≥a: " + maHangHoa);
                break;
                
            case 3:
                System.out.print("Nh·∫≠p t√™n kh√°ch h√†ng c·∫ßn t√¨m: ");
                String tenKhachHang = sc.nextLine();
                List<Ban> ketQua3 = timBanTheoKhachHang(tenKhachHang);
                hienThiKetQuaTimBan(ketQua3, "kh√°ch h√†ng: " + tenKhachHang);
                break;
                
            case 4:
                System.out.print("Nh·∫≠p gi√° t·ªëi thi·ªÉu: ");
                double giaMin = sc.nextDouble();
                System.out.print("Nh·∫≠p gi√° t·ªëi ƒëa: ");
                double giaMax = sc.nextDouble();
                List<Ban> ketQua4 = timBanTheoKhoangGia(giaMin, giaMax);
                hienThiKetQuaTimBan(ketQua4, "kho·∫£ng gi√°: " + giaMin + " - " + giaMax);
                break;
                
            default:
                System.out.println("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
        }
    }

    /**
     * Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm Ban
     */
    private void hienThiKetQuaTimBan(List<Ban> ketQua, String dieuKien) {
        System.out.println("==========================================");
        if (ketQua.isEmpty()) {
            System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y b√°n h√†ng n√†o ph√π h·ª£p v·ªõi " + dieuKien);
        } else {
            System.out.println("‚úÖ T√¨m th·∫•y " + ketQua.size() + " k·∫øt qu·∫£ cho " + dieuKien + ":");
            System.out.println("------------------------------------------");
            for (int i = 0; i < ketQua.size(); i++) {
                Ban ban = ketQua.get(i);
                System.out.println((i + 1) + ". " + ban.toString());
                // C√≥ th·ªÉ hi·ªÉn th·ªã chi ti·∫øt h∆°n n·∫øu c·∫ßn
                // ban.hienThiThongTin();
            }
            
            double tongDoanhThu = ketQua.stream().mapToDouble(Ban::tinhTongTienBan).sum();
            System.out.println("------------------------------------------");
            System.out.println("üìä T·ªïng doanh thu: " + String.format("%.2f VND", tongDoanhThu));
        }
        System.out.println("==========================================");
    }

    /**
     * T√¨m ki·∫øm n√¢ng cao v·ªõi nhi·ªÅu ti√™u ch√≠
     */
    public List<Ban> timKiemNangCao(String tenHangHoa, String khachHang, Double giaMin, Double giaMax) {
        List<Ban> ketQua = new ArrayList<>(danhSachBan);

        // L·ªçc theo t√™n h√†ng h√≥a
        if (tenHangHoa != null && !tenHangHoa.trim().isEmpty()) {
            String tuKhoa = tenHangHoa.toLowerCase().trim();
            ketQua = ketQua.stream()
                    .filter(ban -> ban.getTenHangHoa() != null && 
                                 ban.getTenHangHoa().toLowerCase().contains(tuKhoa))
                    .collect(Collectors.toList());
        }

        // L·ªçc theo kh√°ch h√†ng
        if (khachHang != null && !khachHang.trim().isEmpty()) {
            String tuKhoa = khachHang.toLowerCase().trim();
            ketQua = ketQua.stream()
                    .filter(ban -> ban.getKhachHang() != null && 
                                 ban.getKhachHang().toLowerCase().contains(tuKhoa))
                    .collect(Collectors.toList());
        }

        // L·ªçc theo kho·∫£ng gi√°
        if (giaMin != null) {
            ketQua = ketQua.stream()
                    .filter(ban -> ban.tinhTongTienBan() >= giaMin)
                    .collect(Collectors.toList());
        }

        if (giaMax != null) {
            ketQua = ketQua.stream()
                    .filter(ban -> ban.tinhTongTienBan() <= giaMax)
                    .collect(Collectors.toList());
        }

        return new ArrayList<>(ketQua);
    }

    /**
     * Hi·ªÉn th·ªã menu t√¨m ki·∫øm
     */
    public void hienThiMenuTimKiem() {
        System.out.println("üîç ===== MENU T√åM KI·∫æM =====");
        System.out.println("1. T√¨m ki·∫øm b√°n h√†ng");
        System.out.println("2. T√¨m ki·∫øm h√†ng h√≥a");
        System.out.println("3. T√¨m ki·∫øm t·ªïng h·ª£p");
        System.out.println("4. T√¨m h√†ng h√≥a s·∫Øp h·∫øt");
        System.out.println("0. Quay l·∫°i");
        System.out.println("============================");
    }

    @Override
    public String toString() {
        return String.format("TimKiem{SoBan=%d, SoHangHoa=%d}", 
                           danhSachBan.size(), danhSachHangHoa.size());
    }
}
